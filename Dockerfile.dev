# CLion remote docker environment (taken from: https://github.com/JetBrains/clion-remote/blob/master/Dockerfile.remote-cpp-env)
#
# Build and run:
#   docker build -t sast-fuzz/devenv -f Dockerfile.dev .
#   docker run -d --cap-add sys_ptrace -p 127.0.0.1:2222:22 --name remote_env sast-fuzz/devenv
#   ssh-keygen -f "$HOME/.ssh/known_hosts" -R "[localhost]:2222"
#
# stop:
#   docker stop remote_env
#
# ssh credentials (test user):
#   user@password
# SPDX-FileCopyrightText: 2023 Stephan Lipp, Technical University of Munich (TUM), et al.
# SPDX-License-Identifier: Apache-2.0

FROM ubuntu:20.04

RUN DEBIAN_FRONTEND="noninteractive" apt-get update && apt-get -y install tzdata

RUN apt-get update \
    && apt-get install -y \
        autoconf \
        automake \
        binutils-dev \
        binutils-gold \
        build-essential \
        cmake \
        curl \
        g++ \
        gcc \
        gdb \
        git \
        libboost-all-dev \
        libtool-bin \
        locales-all \
        make \
        ninja-build \
        python3 \
        python3-dev \
        python3-pip \
        python-is-python3 \
        rsync \
        ssh \
        sudo \
        tar \
        vim \
        wget \
        zip \
    && apt-get clean

# Setup Docker user
RUN useradd -m user \
    && yes password | passwd user \
    && echo "user:password" | chpasswd && adduser user sudo

RUN usermod -s /bin/bash user

# Install Poetry
RUN curl -sSL https://install.python-poetry.org | python3 -

ENV PATH="${HOME}/.local/bin:$PATH"

# TODO: Check if still needed
#RUN python3 -m pip install networkx pydot pydotplus

# Install LLVM toolchain

# If set to 'custom', a custom LLVM variant is downloaded that supports to
# output the code lines instrumented by AddressSanitizer (ASan) or Memory-
# Sanitizer (MSan) into a CSV file.
ARG LLVM_VARIANT="custom"

ENV LLVM_VERSION="12.0.0"

RUN if [ "$LLVM_VARIANT" = "custom" ]; then ( \
        cd /opt \
            && wget https://github.com/tum-i4/llvm-project/archive/refs/tags/llvmorg-${LLVM_VERSION}c.tar.gz \
            && tar xf llvmorg-${LLVM_VERSION}c.tar.gz && rm -f llvmorg-${LLVM_VERSION}c.tar.gz \
            && mv llvm-project-llvmorg-${LLVM_VERSION}c llvm-${LLVM_VERSION} \
    ); else ( \
        cd /opt \
            && wget https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-${LLVM_VERSION}.tar.gz \
            && tar xf llvmorg-${LLVM_VERSION}.tar.gz && rm -f llvmorg-${LLVM_VERSION}.tar.gz \
            && mv llvm-project-llvmorg-${LLVM_VERSION} llvm-${LLVM_VERSION} \
    ); fi

RUN mkdir /opt/llvm-${LLVM_VERSION}/build; cd /opt/llvm-${LLVM_VERSION}/build \
    && cmake -G "Ninja" \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_C_COMPILER=gcc \
        -DCMAKE_CXX_COMPILER=g++ \
        -DLIBCXX_ENABLE_SHARED=OFF \
        -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON \
        -DLLVM_BINUTILS_INCDIR="/usr/include" \
        -DLLVM_ENABLE_DUMP=ON \
        -DLLVM_ENABLE_PROJECTS="clang;libcxx;libcxxabi;compiler-rt;lld" \
        -DLLVM_TARGETS_TO_BUILD="X86" \
        ../llvm \
    && ninja && ninja install

# Install LLVMgold (LTO) into bfd-plugins
RUN mkdir -p /usr/lib/bfd-plugins \
    && cp /usr/local/lib/libLTO.so /usr/lib/bfd-plugins \
    && cp /usr/local/lib/LLVMgold.so /usr/lib/bfd-plugins

ENV LLVM_DIR="/opt/llvm-${LLVM_VERSION}/build"

ENV CC=clang CXX=clang++

# Install SVF
ENV SVF_VERSION="2.2"

RUN cd /opt \
    && wget https://github.com/SVF-tools/SVF/archive/refs/tags/SVF-${SVF_VERSION}.tar.gz \
    && tar xf SVF-${SVF_VERSION}.tar.gz && rm -f SVF-${SVF_VERSION}.tar.gz \
    && mv SVF-SVF-${SVF_VERSION} svf-${SVF_VERSION}

# Note: Make sure that 'LLVM_DIR' is set to the right directory! Otherwise SVF's
# build script will download pre-built LLVM binaries which may conflict with the
# version installed above.
RUN cd /opt/svf-${SVF_VERSION} \
    && ./build.sh debug \
    && ./build.sh

ENV SVF_DIR="/opt/svf-${SVF_VERSION}"

# Install WLLVM
RUN python3 -m pip install --upgrade pip
RUN python3 -m pip install wllvm

ENV LLVM_COMPILER_PATH="${LLVM_DIR}/bin" LLVM_COMPILER=clang

# Install Flawfinder
ENV FLAWFINDER_VERSION=2.0.19

RUN cd /opt \
    && wget https://github.com/david-a-wheeler/flawfinder/archive/refs/tags/${FLAWFINDER_VERSION}.tar.gz \
    && tar -xf ${FLAWFINDER_VERSION}.tar.gz && rm -f ${FLAWFINDER_VERSION}.tar.gz

# Install Infer
ENV INFER_VERSION=1.1.0

RUN cd /opt \
    && wget https://github.com/facebook/infer/releases/download/v${INFER_VERSION}/infer-linux64-v${INFER_VERSION}.tar.xz \
    && tar -xf infer-linux64-v${INFER_VERSION}.tar.xz && rm -f infer-linux64-v${INFER_VERSION}.tar.xz \
    && mv infer-linux64-v${INFER_VERSION} infer-${INFER_VERSION}

# Install CodeQL (cli-tool + library)
ENV CODEQL_VERSION=2.12.0

RUN mkdir /opt/codeql-${CODEQL_VERSION} && cd /opt/codeql-${CODEQL_VERSION} \
    && wget https://github.com/github/codeql-cli-binaries/releases/download/v${CODEQL_VERSION}/codeql-linux64.zip \
    && unzip codeql-linux64.zip && rm -f codeql-linux64.zip \
    && mv codeql cli \
    && wget https://github.com/github/codeql/archive/refs/tags/codeql-cli/v${CODEQL_VERSION}.zip \
    && unzip v${CODEQL_VERSION}.zip && rm -f v${CODEQL_VERSION}.zip \
    && mv codeql-codeql-cli-v${CODEQL_VERSION} lib

# Setup SSH
RUN ( \
        echo 'LogLevel DEBUG2'; \
        echo 'PermitRootLogin yes'; \
        echo 'PasswordAuthentication yes'; \
        echo 'Subsystem sftp /usr/lib/openssh/sftp-server'; \
    ) > /etc/ssh/sshd_config_test \
    && mkdir /run/sshd

CMD ["/usr/sbin/sshd", "-D", "-e", "-f", "/etc/ssh/sshd_config_test"]
